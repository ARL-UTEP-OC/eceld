#!/usr/bin/env python
import logging
import time
from engine.engine import Engine
import sys
import os


TSHARK_DIR = '/tmp/tshark'
PYKEYLOGGER_DIR = '/tmp/pykeylogger'
NMAP_DIR = '/tmp/nmap'
AUDITD_DIR = '/tmp/auditd'

def execute_tshark_test():
    logging.getLogger().setLevel(logging.DEBUG)
    logging.debug("Starting Program")
    logging.debug("Engine_invoker: getting engine instance")
    engine = Engine()
    logging.debug("Engine_invoker: Removing all previous data")
    #engine.delete_all()
    logging.debug("Engine_invoker: invoking print_collector_names")
    engine.print_collector_names()
    logging.debug("Engine_invoker: obtaining tshark collector")
    c = engine.get_collector("tshark")
    logging.debug("Engine_invoker: starting collector")
    engine.start_collector(c)
    logging.debug("Engine_invoker: waiting 10 seconds")
    time.sleep(10)
    logging.debug("Engine_invoker: stopping collector")
    engine.stop_collector(c)
    logging.debug("Engine_invoker: parsing data")
    engine.parser(c)
    logging.debug("Engine_invoker: exporting data")
    os.makedirs(TSHARK_DIR, exist_ok=True)
    engine.export(TSHARK_DIR)
    logging.debug("Engine_invoker: Tshark Complete.")

def execute_pykeylogger_test():
    logging.getLogger().setLevel(logging.DEBUG)
    logging.debug("Starting Program")
    logging.debug("Engine_invoker: getting engine instance")
    engine = Engine()
    logging.debug("Engine_invoker: Removing all previous data")
    #engine.delete_all()
    logging.debug("Engine_invoker: invoking print_collector_names")
    engine.print_collector_names()
    logging.debug("Engine_invoker: obtaining pykeylogger collector")
    c = engine.get_collector("pykeylogger")
    logging.debug("Engine_invoker: starting collector")
    engine.start_collector(c)
    logging.debug("Engine_invoker: waiting 10 seconds")
    time.sleep(10)
    logging.debug("Engine_invoker: stopping collector")
    engine.stop_collector(c)
    logging.debug("Engine_invoker: parsing data")
    engine.parser(c)
    logging.debug("Engine_invoker: exporting data")
    os.makedirs(PYKEYLOGGER_DIR, exist_ok=True)
    engine.export(PYKEYLOGGER_DIR)
    logging.debug("Engine_invoker: PyKeylogger Complete.")

#def execute_nmap_test():
    #logging.getLogger().setLevel(logging.DEBUG)
    #logging.debug("Starting Program")
    #logging.debug("Engine_invoker: getting engine instance")
    #engine = Engine()
    #logging.debug("Engine_invoker: Removing all previous data")
    #engine.delete_all()
    #logging.debug("Engine_invoker: invoking print_collector_names")
    #engine.print_collector_names()
    #logging.debug("Engine_invoker: obtaining nmap collector")
    #c = engine.get_collector("nmap")
    #logging.debug("Engine_invoker: starting collector")
    #engine.start_collector(c)
    #logging.debug("Engine_invoker: waiting 10 seconds")
    #time.sleep(10)
    #logging.debug("Engine_invoker: stopping collector")
    #engine.stop_collector(c)
    #logging.debug("Engine_invoker: parsing data")
    #engine.parser(c)
    #logging.debug("Engine_invoker: exporting data")
    #os.makedirs(NMAP_DIR, exist_ok=True)
    #engine.export(NMAP_DIR)
    #logging.debug("Engine_invoker: Nmap Complete.")

#def execute_auditd_test():
    #logging.getLogger().setLevel(logging.DEBUG)
    #logging.debug("Starting Program")
    #logging.debug("Engine_invoker: getting engine instance")
    #engine = Engine()
    #logging.debug("Engine_invoker: Removing all previous data")
    #engine.delete_all()
    #logging.debug("Engine_invoker: invoking print_collector_names")
    #engine.print_collector_names()
    #logging.debug("Engine_invoker: obtaining auditd collector")
    #c = engine.get_collector("auditd")
    #logging.debug("Engine_invoker: starting collector")
    #engine.start_collector(c)
    #logging.debug("Engine_invoker: waiting 10 seconds")
    #time.sleep(30)
    #logging.debug("Engine_invoker: stopping collector")
    #engine.stop_collector(c)
    #logging.debug("Engine_invoker: parsing data")
    #engine.parser(c)
    #logging.debug("Engine_invoker: exporting data")
    #os.makedirs(AUDITD_DIR, exist_ok=True)
    #engine.export(AUDITD_DIR)
    #logging.debug("Engine_invoker: Auditd Complete.")

if __name__ == "__main__":
    engine = Engine()
    engine.delete_all()
    execute_tshark_test()
    execute_pykeylogger_test()
    #execute_nmap_test()
    #execute_auditd_test()
